// Generated by CoffeeScript 1.6.3
/*
@name Unionized

@fileOverview
Lightweight test factories, optimized for
[CoffeeScript](http://coffeescript.org/).
*/

var FactoryDefinition, Unionized, dot, factoryFunctions, fn, _, _fn, _i, _len,
  __slice = [].slice;

_ = require('lodash');

dot = require('dot-component');

FactoryDefinition = (function() {
  FactoryDefinition.prototype.__definition = true;

  function FactoryDefinition(attrs, mode, args) {
    this.attrs = attrs != null ? attrs : {};
    this.mode = mode;
    this.args = args;
    this._out = {};
    this.setAttrs();
  }

  FactoryDefinition.prototype.setAttrs = function() {
    var key, value, _ref, _results;
    _ref = this.attrs;
    _results = [];
    for (key in _ref) {
      value = _ref[key];
      _results.push(this.set(key, value));
    }
    return _results;
  };

  FactoryDefinition.prototype.set = function(key, value, options) {
    if (options == null) {
      options = {};
    }
    if (options.init == null) {
      options.init = true;
    }
    dot.set(this._out, key, value, options.init);
    return value;
  };

  FactoryDefinition.prototype.get = function(key) {
    return dot.get(this._out, key);
  };

  FactoryDefinition.prototype.resolve = function() {
    this.setAttrs();
    return this._out;
  };

  return FactoryDefinition;

})();

Unionized = (function() {
  function Unionized() {
    var args, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (typeof _(args).last() === 'object') {
      this.parent = args.pop();
    }
    this.factoryFn = args.pop();
    this.model = (_ref = args.pop()) != null ? _ref : Object;
    this.children = [];
  }

  /*
  Builds a plain, JSON-compatible object from your factory
  
  @param {string} [name] - Name of the child factory to use
    (or, just use this one if a name is not supplied)
  @param {object} [factoryParams] - Parameters to send to the factory function
  
  @returns {object} A plain old JavaScript object
  @async
  */


  Unionized.prototype._json = function(definition, callback) {
    var _ref,
      _this = this;
    return (_ref = this.parent.factoryFn).call.apply(_ref, [definition].concat(__slice.call(definition.args), [function(err) {
      var _ref;
      if (err != null) {
        return callback(err);
      }
      return (_ref = _this.factoryFn).call.apply(_ref, [definition].concat(__slice.call(definition.args), [function(err) {
        if (err != null) {
          return callback(err);
        }
        return callback(null, definition.resolve());
      }]));
    }]));
  };

  /*
  Creates an instance of the model with the parameters defined when you created
  the factory
  
  @param {string} [name] - Name of the child factory to use
    (or, just use this one if a name is not supplied)
  @param {object} [factoryParams] - Parameters to send to the factory function
  
  @returns {object} An instance of the factory model
  @async
  */


  Unionized.prototype._build = function(definition, callback) {
    var _this = this;
    return this._json(definition, function(err, result) {
      var model;
      if (err != null) {
        return callback(err);
      }
      model = _this.modelInstanceWith(result);
      return callback(null, model);
    });
  };

  /*
  Creates and saves an instance of the model with the parameters defined when
  you created the factory
  
  @param {string} [name] - Name of the child factory to use
    (or, just use this one if a name is not supplied)
  @param {object} [factoryParams] - Parameters to send to the factory function
  
  @returns {object} An instance of the factory model, after `#saveModel` has
    been called on it.
  @async
  */


  Unionized.prototype._create = function(definition, callback) {
    var _this = this;
    return this._build(definition, function(err, model) {
      if (err != null) {
        return callback(err);
      }
      return _this.saveModel(model, callback);
    });
  };

  /*
  Define a sub-factory that shares the factory function, model, and overwritten
  options of this factory. The sub-factory can optionally be referred to by a
  name so it can be accessed later using the `#child` function.
  
  @param {string} [name] - Optional name of the child factory to use
  @param {object} [model] - Optional model for the child factory to use
  @param {function} factoryFn - Factory function for the child factory. Will be
    applied before the factory function of the parent factory.
  
  @returns {Unionized} A new factory that descends from the current one.
  */


  Unionized.prototype.define = function() {
    var args, name;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    name = typeof args[0] === 'string' ? args.shift() : this.children.length;
    return this.children[name] = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Unionized, __slice.call(args).concat([this]), function(){});
  };

  /*
  Find a descendant factory by name
  
  @param {string} name - Name of the descendant factory
  
  @returns {Unionized} The descendant factory with the supplied name
  
  @throws Complains if there is no descendant factory with the supplied name
  */


  Unionized.prototype.child = function(name) {
    return this.children[name] || (function() {
      throw "Unknown factory `" + name + "`";
    })();
  };

  /*
  Create a new instance of the factory model, given a set of attributes
  
  @param {object} attrs A set of attributes to pass to the factory model
  
  @returns {object} A copy of the factory model with the attributes set
  */


  Unionized.prototype.modelInstanceWith = function(attrs) {
    return new this.model(attrs);
  };

  /*
  Persists a copy of the factory model
   
  @param {object} An instance of the factory model to persist
  
  @returns {*} Whatever the persistance function for the model returns
  @async
  */


  Unionized.prototype.saveModel = function(model, callback) {
    if (_.isFunction(model.save)) {
      return model.save(callback);
    } else {
      return _.defer(callback, null, model);
    }
  };

  return Unionized;

})();

factoryFunctions = ['json', 'build', 'create'];

_fn = function(fn) {
  var fnWithSaneArgs;
  fnWithSaneArgs = Unionized.prototype["_" + fn];
  return Unionized.prototype[fn] = function() {
    var args, attrs, callback, definition, instance;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    instance = typeof args[0] === 'string' ? this.child(args.shift()) : this;
    callback = args.pop();
    attrs = args.shift();
    definition = new FactoryDefinition(attrs, fn, args);
    return fnWithSaneArgs.call(instance, definition, callback);
  };
};
for (_i = 0, _len = factoryFunctions.length; _i < _len; _i++) {
  fn = factoryFunctions[_i];
  _fn(fn);
}

module.exports = new Unionized(_.defer);
