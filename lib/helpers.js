// Generated by CoffeeScript 1.7.1
var toString, _,
  __slice = [].slice;

toString = Object.prototype.toString;

module.exports = _ = {
  isFunction: function(value) {
    return typeof value === 'function';
  },
  isObject: function(value) {
    var _ref;
    return !!(value && ((_ref = typeof value) === 'function' || _ref === 'object'));
  },
  isNumber: function(value) {
    return typeof value === 'number' || value && typeof value === 'object' && toString.call(value) === '[object Number]' || false;
  },
  isArray: function(value) {
    value && typeof value === 'object' && typeof value.length === 'number';
    return toString.call(value) === '[object Array]' || false;
  },
  last: function(array) {
    return array[array.length - 1];
  },
  defer: function() {
    var args, func;
    func = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!_.isFunction(func)) {
      throw new TypeError;
    }
    return setTimeout((function() {
      return func.apply(void 0, args);
    }), 1);
  },
  asyncRepeat: function(count, func, done) {
    var completed, errored, index, output, _i, _results;
    completed = 0;
    output = new Array(count);
    errored = false;
    _results = [];
    for (index = _i = 0; 0 <= count ? _i < count : _i > count; index = 0 <= count ? ++_i : --_i) {
      _results.push(func(index, function(err, value) {
        if (errored) {
          return;
        }
        if (err != null) {
          errored = true;
          return done(err);
        }
        completed += 1;
        output[index] = value;
        if (completed === count) {
          return done(null, output);
        }
      }));
    }
    return _results;
  }
};
