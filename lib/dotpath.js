// Generated by CoffeeScript 1.7.1
var dotpath, getPathArray, getPointer, getSubpaths, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('./helpers');

getPointer = function(object, pathArray, init, last) {
  var component, index, nextComponent, pointer, _i, _len, _ref;
  if (init == null) {
    init = false;
  }
  if (last == null) {
    last = null;
  }
  pointer = object;
  for (index = _i = 0, _len = pathArray.length; _i < _len; index = ++_i) {
    component = pathArray[index];
    if (!_.isObject(pointer[component])) {
      if (!init) {
        return;
      }
      nextComponent = (_ref = pathArray[index + 1]) != null ? _ref : last;
      pointer[component] = _.isNumber(nextComponent) ? [] : {};
    }
    pointer = pointer[component];
  }
  return pointer;
};

getPathArray = function(pathString) {
  return pathString.match(/(\w+)/g).map(function(substr) {
    if (substr.match(/^\d+$/)) {
      return parseInt(substr);
    } else {
      return substr;
    }
  });
};

getSubpaths = function(pathString) {
  var component, rebuildPath, subPaths, _i, _len, _ref;
  rebuildPath = [];
  subPaths = [];
  _ref = getPathArray(pathString);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    component = _ref[_i];
    rebuildPath.push(component);
    subPaths.push(rebuildPath.join('.'));
  }
  return subPaths;
};

module.exports = dotpath = {
  get: function(object, pathString) {
    return getPointer(object, getPathArray(pathString));
  },
  set: function(object, pathString, value, init) {
    var end, pathArray, pointer;
    if (init == null) {
      init = true;
    }
    pathArray = getPathArray(pathString);
    end = pathArray.pop();
    pointer = getPointer(object, pathArray, init, end);
    return pointer[end] = value;
  },
  clear: function(object, pathString) {
    return delete dotpath.get(object, pathString);
  },
  containsSubpath: function(obj, pathString) {
    var keys, subpath, _i, _len, _ref;
    keys = Object.keys(obj);
    _ref = getSubpaths(pathString);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      subpath = _ref[_i];
      if (__indexOf.call(keys, subpath) >= 0) {
        return true;
      }
    }
  }
};
